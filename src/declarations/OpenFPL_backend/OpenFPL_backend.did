type WeeklyLeaderboardDTO = record {
  entries : vec LeaderboardEntry;
  gameweek : GameweekNumber;
  seasonId : SeasonId;
  totalEntries : nat;
};
type UpdateSystemStateDTO = record {
  calculationGameweek : GameweekNumber;
  calculationMonth : CalendarMonth;
  calculationSeason : SeasonId;
  onHold : bool;
  pickTeamGameweek : GameweekNumber;
  pickTeamSeason : SeasonId;
  pickTeamSeasonName : text;
  transferWindowActive : bool;
};
type UpdatePlayerDTO = record {
  dateOfBirth : int;
  firstName : text;
  lastName : text;
  nationality : CountryId;
  playerId : PlayerId;
  position : PlayerPosition;
  shirtNumber : nat8;
};
type UpdateFantasyTeamDTO = record {
  braceBonusGameweek : GameweekNumber;
  captainFantasticGameweek : GameweekNumber;
  captainFantasticPlayerId : PlayerId;
  captainId : PlayerId;
  countrymenCountryId : CountryId;
  countrymenGameweek : GameweekNumber;
  goalGetterGameweek : GameweekNumber;
  goalGetterPlayerId : PlayerId;
  hatTrickHeroGameweek : GameweekNumber;
  noEntryGameweek : GameweekNumber;
  noEntryPlayerId : PlayerId;
  passMasterGameweek : GameweekNumber;
  passMasterPlayerId : PlayerId;
  playerIds : vec PlayerId;
  prospectsGameweek : GameweekNumber;
  safeHandsGameweek : GameweekNumber;
  safeHandsPlayerId : PlayerId;
  teamBoostClubId : ClubId;
  teamBoostGameweek : GameweekNumber;
  transferWindowGameweek : GameweekNumber;
  username : text;
};
type UpdateClubDTO = record {
  abbreviatedName : text;
  clubId : ClubId;
  friendlyName : text;
  name : text;
  primaryColourHex : text;
  secondaryColourHex : text;
  shirtType : ShirtType;
  thirdColourHex : text;
};
type UnretirePlayerDTO = record { playerId : PlayerId };
type TransferPlayerDTO = record {
  newClubId : ClubId;
  playerId : PlayerId;
};
type SystemStateDTO = record {
  calculationGameweek : GameweekNumber;
  calculationMonth : CalendarMonth;
  calculationSeason : SeasonId;
  pickTeamGameweek : GameweekNumber;
};
type SubmitFixtureDataDTO = record {
  fixtureId : FixtureId;
  gameweek : GameweekNumber;
  playerEventData : vec PlayerEventData;
  seasonId : SeasonId;
};
type ShirtType = variant {
  Filled;
  Striped;
};
type SetPlayerInjuryDTO = record {
  description : text;
  expectedEndDate : int;
  playerId : PlayerId;
};
type SeasonLeaderboardDTO = record {
  entries : vec LeaderboardEntry;
  seasonId : SeasonId;
  totalEntries : nat;
};
type SeasonId = nat16;
type RevaluePlayerUpDTO = record { playerId : PlayerId };
type RevaluePlayerDownDTO = record { playerId : PlayerId };
type RetirePlayerDTO = record {
  playerId : PlayerId;
  retirementDate : int;
};
type Result_9 = variant {
  err : Error;
  ok : vec PlayerPointsDTO;
};
type Result_8 = variant {
  err : Error;
  ok : vec PlayerDTO;
};
type Result_7 = variant {
  err : Error;
  ok : ProfileDTO;
};
type Result_6 = variant {
  err : Error;
  ok : PublicProfileDTO;
};
type Result_5 = variant {
  err : Error;
  ok : SeasonLeaderboardDTO;
};
type Result_4 = variant {
  err : Error;
  ok : SystemStateDTO;
};
type Result_3 = variant {
  err : Error;
  ok : nat;
};
type Result_2 = variant {
  err : Error;
  ok : WeeklyLeaderboardDTO;
};
type Result_16 = variant {
  err : Error;
  ok : vec ClubDTO;
};
type Result_15 = variant {
  err : Error;
  ok : vec CountryDTO;
};
type Result_14 = variant {
  err : Error;
  ok : vec DataCacheDTO;
};
type Result_13 = variant {
  err : Error;
  ok : vec FixtureDTO;
};
type Result_12 = variant {
  err : Error;
  ok : ManagerDTO;
};
type Result_11 = variant {
  err : Error;
  ok : ManagerGameweekDTO;
};
type Result_10 = variant {
  err : Error;
  ok : MonthlyLeaderboardDTO;
};
type Result_1 = variant {
  err : Error;
  ok;
};
type Result = variant {
  err : text;
  ok : text;
};
type RescheduleFixtureDTO = record {
  fixtureId : FixtureId;
  seasonId : SeasonId;
  updatedFixtureDate : int;
  updatedFixtureGameweek : GameweekNumber;
};
type RecallPlayerDTO = record { playerId : PlayerId };
type PublicProfileDTO = record {
  createDate : int;
  favouriteClubId : nat16;
  principalId : text;
  profilePicture : blob;
  username : text;
};
type PromoteNewClubDTO = record {
  abbreviatedName : text;
  friendlyName : text;
  name : text;
  primaryColourHex : text;
  secondaryColourHex : text;
  shirtType : ShirtType;
  thirdColourHex : text;
};
type PromoteFormerClubDTO = record { clubId : ClubId };
type ProfileDTO = record {
  bankQuarterMillions : nat16;
  braceBonusGameweek : GameweekNumber;
  captainFantasticGameweek : GameweekNumber;
  captainFantasticPlayerId : PlayerId;
  captainId : PlayerId;
  countrymenCountryId : CountryId;
  countrymenGameweek : GameweekNumber;
  createDate : int;
  favouriteClubId : ClubId;
  goalGetterGameweek : GameweekNumber;
  goalGetterPlayerId : PlayerId;
  hatTrickHeroGameweek : GameweekNumber;
  history : List;
  monthlyBonusesAvailable : nat8;
  noEntryGameweek : GameweekNumber;
  noEntryPlayerId : PlayerId;
  passMasterGameweek : GameweekNumber;
  passMasterPlayerId : PlayerId;
  playerIds : vec PlayerId;
  principalId : text;
  profilePicture : blob;
  prospectsGameweek : GameweekNumber;
  safeHandsGameweek : GameweekNumber;
  safeHandsPlayerId : PlayerId;
  teamBoostClubId : ClubId;
  teamBoostGameweek : GameweekNumber;
  termsAccepted : bool;
  transferWindowGameweek : GameweekNumber;
  transfersAvailable : nat8;
  username : text;
};
type PlayerPosition = variant {
  Defender;
  Forward;
  Goalkeeper;
  Midfielder;
};
type PlayerPointsDTO = record {
  clubId : ClubId;
  events : vec PlayerEventData;
  gameweek : GameweekNumber;
  id : nat16;
  points : int16;
  position : PlayerPosition;
};
type PlayerId = nat16;
type PlayerEventType = variant {
  Appearance;
  CleanSheet;
  Goal;
  GoalAssisted;
  GoalConceded;
  HighestScoringPlayer;
  KeeperSave;
  OwnGoal;
  PenaltyMissed;
  PenaltySaved;
  RedCard;
  YellowCard;
};
type PlayerEventData = record {
  clubId : ClubId;
  eventEndMinute : nat8;
  eventStartMinute : nat8;
  eventType : PlayerEventType;
  fixtureId : FixtureId;
  playerId : nat16;
};
type PlayerDTO = record {
  clubId : ClubId;
  dateOfBirth : int;
  firstName : text;
  id : nat16;
  lastName : text;
  nationality : CountryId;
  position : PlayerPosition;
  shirtNumber : nat8;
  totalPoints : int16;
  valueQuarterMillions : nat16;
};
type MonthlyLeaderboardDTO = record {
  clubId : ClubId;
  entries : vec LeaderboardEntry;
  month : nat8;
  seasonId : SeasonId;
  totalEntries : nat;
};
type ManagerGameweekDTO = record {
  bankQuarterMillions : nat16;
  braceBonusGameweek : GameweekNumber;
  captainFantasticGameweek : GameweekNumber;
  captainFantasticPlayerId : PlayerId;
  captainId : PlayerId;
  countrymenCountryId : CountryId;
  countrymenGameweek : GameweekNumber;
  favouriteClubId : ClubId;
  gameweek : GameweekNumber;
  goalGetterGameweek : GameweekNumber;
  goalGetterPlayerId : PlayerId;
  hatTrickHeroGameweek : GameweekNumber;
  monthlyBonusesAvailable : nat8;
  noEntryGameweek : GameweekNumber;
  noEntryPlayerId : PlayerId;
  passMasterGameweek : GameweekNumber;
  passMasterPlayerId : PlayerId;
  playerIds : vec PlayerId;
  points : int16;
  principalId : text;
  prospectsGameweek : GameweekNumber;
  safeHandsGameweek : GameweekNumber;
  safeHandsPlayerId : PlayerId;
  teamBoostClubId : ClubId;
  teamBoostGameweek : GameweekNumber;
  teamValueQuarterMillions : nat16;
  transferWindowGameweek : GameweekNumber;
  transfersAvailable : nat8;
  username : text;
};
type ManagerDTO = record {
  createDate : int;
  favouriteClubId : ClubId;
  gameweeks : vec FantasyTeamSnapshot;
  monthlyPoints : int16;
  monthlyPosition : int;
  monthlyPositionText : text;
  principalId : text;
  profilePicture : blob;
  seasonPoints : int16;
  seasonPosition : int;
  seasonPositionText : text;
  username : text;
  weeklyPoints : int16;
  weeklyPosition : int;
  weeklyPositionText : text;
};
type LoanPlayerDTO = record {
  loanClubId : ClubId;
  loanEndDate : int;
  playerId : PlayerId;
};
type List_1 = opt record {
  FantasyTeamSnapshot;
  List_1;
};
type List = opt record {
  FantasyTeamSeason;
  List;
};
type LeaderboardEntry = record {
  points : int16;
  position : nat;
  positionText : text;
  principalId : text;
  username : text;
};
type GameweekNumber = nat8;
type FixtureStatus = variant {
  Active;
  Complete;
  Finalised;
  Unplayed;
};
type FixtureId = nat32;
type FixtureDTO = record {
  awayClubId : ClubId;
  awayGoals : nat8;
  events : vec PlayerEventData;
  gameweek : GameweekNumber;
  highestScoringPlayerId : nat16;
  homeClubId : ClubId;
  homeGoals : nat8;
  id : nat32;
  kickOff : int;
  seasonId : SeasonId;
  status : FixtureStatus;
};
type FantasyTeamSnapshot = record {
  bankQuarterMillions : nat16;
  braceBonusGameweek : GameweekNumber;
  captainFantasticGameweek : GameweekNumber;
  captainFantasticPlayerId : PlayerId;
  captainId : PlayerId;
  countrymenCountryId : CountryId;
  countrymenGameweek : GameweekNumber;
  favouriteClubId : ClubId;
  gameweek : GameweekNumber;
  goalGetterGameweek : GameweekNumber;
  goalGetterPlayerId : PlayerId;
  hatTrickHeroGameweek : GameweekNumber;
  monthlyBonusesAvailable : nat8;
  noEntryGameweek : GameweekNumber;
  noEntryPlayerId : PlayerId;
  passMasterGameweek : GameweekNumber;
  passMasterPlayerId : PlayerId;
  playerIds : vec PlayerId;
  points : int16;
  principalId : text;
  prospectsGameweek : GameweekNumber;
  safeHandsGameweek : GameweekNumber;
  safeHandsPlayerId : PlayerId;
  teamBoostClubId : ClubId;
  teamBoostGameweek : GameweekNumber;
  teamValueQuarterMillions : nat16;
  transferWindowGameweek : GameweekNumber;
  transfersAvailable : nat8;
  username : text;
};
type FantasyTeamSeason = record {
  gameweeks : List_1;
  seasonId : SeasonId;
  totalPoints : int16;
};
type Error = variant {
  AlreadyExists;
  DecodeError;
  InvalidData;
  InvalidTeamError;
  NotAllowed;
  NotAuthorized;
  NotFound;
  SystemOnHold;
};
type DataCacheDTO = record {
  category : text;
  hash : text;
};
type CreatePlayerDTO = record {
  clubId : ClubId;
  dateOfBirth : int;
  firstName : text;
  lastName : text;
  nationality : CountryId;
  position : PlayerPosition;
  shirtNumber : nat8;
  valueQuarterMillions : nat16;
};
type CountryId = nat16;
type CountryDTO = record {
  code : text;
  id : CountryId;
  name : text;
};
type ClubId = nat16;
type ClubDTO = record {
  abbreviatedName : text;
  friendlyName : text;
  id : ClubId;
  name : text;
  primaryColourHex : text;
  secondaryColourHex : text;
  shirtType : ShirtType;
  thirdColourHex : text;
};
type CalendarMonth = nat8;
type AddInitialFixturesDTO = record {
  seasonFixtures : vec FixtureDTO;
  seasonId : SeasonId;
};
service : {
  burnICPToCycles : (nat64) -> ();
  executeAddInitialFixtures : (AddInitialFixturesDTO) -> ();
  executeCreatePlayer : (CreatePlayerDTO) -> ();
  executeLoanPlayer : (LoanPlayerDTO) -> ();
  executePromoteFormerClub : (PromoteFormerClubDTO) -> ();
  executePromoteNewClub : (PromoteNewClubDTO) -> ();
  executeRecallPlayer : (RecallPlayerDTO) -> ();
  executeRescheduleFixture : (RescheduleFixtureDTO) -> ();
  executeRetirePlayer : (RetirePlayerDTO) -> ();
  executeRevaluePlayerDown : (RevaluePlayerDownDTO) -> ();
  executeRevaluePlayerUp : (RevaluePlayerUpDTO) -> ();
  executeSetPlayerInjury : (SetPlayerInjuryDTO) -> ();
  executeSubmitFixtureData : (SubmitFixtureDataDTO) -> ();
  executeTransferPlayer : (TransferPlayerDTO) -> ();
  executeUnretirePlayer : (UnretirePlayerDTO) -> ();
  executeUpdateClub : (UpdateClubDTO) -> ();
  executeUpdatePlayer : (UpdatePlayerDTO) -> ();
  getClubs : () -> (Result_16) query;
  getCountries : () -> (Result_15) query;
  getDataHashes : () -> (Result_14) query;
  getFixtures : (SeasonId) -> (Result_13) query;
  getManager : () -> (Result_12);
  getManagerGameweek : (text, SeasonId, GameweekNumber) -> (Result_11);
  getMonthlyLeaderboard : (SeasonId, ClubId, CalendarMonth, nat, nat) -> (Result_10);
  getPlayerDetailsForGameweek : (SeasonId, GameweekNumber) -> (Result_9) query;
  getPlayers : () -> (Result_8) query;
  getProfile : () -> (Result_7);
  getPublicProfile : (text) -> (Result_6);
  getSeasonLeaderboard : (SeasonId, nat, nat) -> (Result_5);
  getSystemState : () -> (Result_4) query;
  getTotalManagers : () -> (Result_3) query;
  getWeeklyLeaderboard : (SeasonId, GameweekNumber, nat, nat) -> (Result_2);
  init : () -> ();
  isUsernameValid : (text) -> (bool) query;
  requestCanisterTopup : () -> ();
  saveFantasyTeam : (UpdateFantasyTeamDTO) -> (Result_1);
  updateFavouriteClub : (ClubId) -> (Result_1);
  updateProfilePicture : (blob) -> (Result_1);
  updateSystemState : (UpdateSystemStateDTO) -> (Result_1);
  updateUsername : (text) -> (Result_1);
  validateAddInitialFixtures : (AddInitialFixturesDTO) -> (Result);
  validateCreatePlayer : (CreatePlayerDTO) -> (Result);
  validateLoanPlayer : (LoanPlayerDTO) -> (Result);
  validatePromoteFormerClub : (PromoteFormerClubDTO) -> (Result);
  validatePromoteNewClub : (PromoteNewClubDTO) -> (Result);
  validateRecallPlayer : (RecallPlayerDTO) -> (Result);
  validateRescheduleFixture : (RescheduleFixtureDTO) -> (Result);
  validateRetirePlayer : (RetirePlayerDTO) -> (Result);
  validateRevaluePlayerDown : (RevaluePlayerDownDTO) -> (Result);
  validateRevaluePlayerUp : (RevaluePlayerUpDTO) -> (Result);
  validateSetPlayerInjury : (SetPlayerInjuryDTO) -> (Result);
  validateSubmitFixtureData : (SubmitFixtureDataDTO) -> (Result);
  validateTransferPlayer : (TransferPlayerDTO) -> (Result);
  validateUnretirePlayer : (UnretirePlayerDTO) -> (Result);
  validateUpdateClub : (UpdateClubDTO) -> (Result);
  validateUpdatePlayer : (UpdatePlayerDTO) -> (Result);
};
