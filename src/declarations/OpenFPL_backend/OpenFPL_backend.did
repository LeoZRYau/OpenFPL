type UserFantasyTeam = 
 record {
   fantasyTeam: FantasyTeam;
   history: List;
 };
type TeamId = nat16;
type Team = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: nat16;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
 };
type SystemState = 
 record {
   activeGameweek: GameweekNumber;
   activeMonth: nat8;
   activeSeason: Season;
   focusGameweek: GameweekNumber;
 };
type SeasonId = nat16;
type SeasonDTO = 
 record {
   id: SeasonId;
   name: text;
   year: nat16;
 };
type Season = 
 record {
   gameweeks: List_3;
   id: nat16;
   name: text;
   postponedFixtures: List_4;
   year: nat16;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileDTO = 
 record {
   canUpdateFavouriteTeam: bool;
   createDate: int;
   displayName: text;
   favouriteTeamId: nat16;
   fplDepositAddress: blob;
   icpDepositAddress: blob;
   membershipType: nat8;
   principalName: text;
   profilePicture: blob;
   reputation: nat32;
 };
type PlayerId = nat16;
type PlayerEventData = 
 record {
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: nat8;
   fixtureId: FixtureId;
   playerId: nat16;
   teamId: TeamId;
 };
type PaginatedLeaderboard = 
 record {
   entries: vec LeaderboardEntry;
   gameweek: GameweekNumber;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type PaginatedClubLeaderboard = 
 record {
   clubId: TeamId;
   entries: vec LeaderboardEntry;
   month: nat8;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type List_4 = 
 opt record {
       Fixture;
       List_4;
     };
type List_3 = 
 opt record {
       Gameweek;
       List_3;
     };
type List_2 = 
 opt record {
       PlayerEventData;
       List_2;
     };
type List_1 = 
 opt record {
       FantasyTeamSnapshot;
       List_1;
     };
type List = 
 opt record {
       FantasyTeamSeason;
       List;
     };
type LeaderboardEntry = 
 record {
   points: int16;
   position: int;
   positionText: text;
   principalId: text;
   username: text;
 };
type GameweekNumber = nat8;
type Gameweek = 
 record {
   canisterId: text;
   fixtures: List_4;
   number: GameweekNumber;
 };
type FixtureId = nat32;
type FixtureDTO = 
 record {
   awayGoals: nat8;
   awayTeamId: TeamId;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   highestScoringPlayerId: nat16;
   homeGoals: nat8;
   homeTeamId: TeamId;
   id: nat32;
   kickOff: int;
   seasonId: SeasonId;
   status: nat8;
 };
type Fixture = 
 record {
   awayGoals: nat8;
   awayTeamId: TeamId;
   events: List_2;
   gameweek: GameweekNumber;
   highestScoringPlayerId: nat16;
   homeGoals: nat8;
   homeTeamId: TeamId;
   id: nat32;
   kickOff: int;
   seasonId: SeasonId;
   status: nat8;
 };
type FantasyTeamSnapshot = 
 record {
   bankBalance: nat;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: nat16;
   favouriteTeamId: TeamId;
   gameweek: GameweekNumber;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   points: int16;
   principalId: text;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   teamBoostGameweek: GameweekNumber;
   teamBoostTeamId: TeamId;
   teamName: text;
   transfersAvailable: nat8;
 };
type FantasyTeamSeason = 
 record {
   gameweeks: List_1;
   seasonId: SeasonId;
   totalPoints: int16;
 };
type FantasyTeam = 
 record {
   bankBalance: nat;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   favouriteTeamId: TeamId;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   principalId: text;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   teamBoostGameweek: GameweekNumber;
   teamBoostTeamId: TeamId;
   teamName: text;
   transfersAvailable: nat8;
 };
type Error = 
 variant {
   AlreadyExists;
   DecodeError;
   InvalidTeamError;
   NotAllowed;
   NotAuthorized;
   NotFound;
 };
type DataCache = 
 record {
   category: text;
   hash: text;
 };
type AccountBalanceDTO = 
 record {
   fplBalance: nat64;
   icpBalance: nat64;
 };
service : {
  fixMissingProfiles: () -> ();
  getAccountBalanceDTO: () -> (AccountBalanceDTO);
  getAllProfilesDEV: () -> (vec ProfileDTO);
  getClubLeaderboard: (nat16, nat8, TeamId, nat, nat) ->
   (PaginatedClubLeaderboard) query;
  getClubLeaderboardsCache: (nat16, nat8) ->
   (vec PaginatedClubLeaderboard) query;
  getDataHashes: () -> (vec DataCache) query;
  getFantasyTeam: () -> (FantasyTeam) query;
  getFantasyTeamForGameweek: (text, nat16, nat8) ->
   (FantasyTeamSnapshot) query;
  getFantasyTeamsDEV: () -> (vec record {
                                   text;
                                   UserFantasyTeam;
                                 });
  getFixture: (SeasonId, GameweekNumber, FixtureId) -> (Fixture);
  getFixtureDTOs: () -> (vec FixtureDTO) query;
  getFixtures: () -> (vec Fixture) query;
  getFixturesForSeason: (SeasonId) -> (vec Fixture) query;
  getProfileDTO: () -> (ProfileDTO);
  getProfilesWithoutTeamsCount: () -> (nat);
  getPublicProfileDTO: (text) -> (ProfileDTO) query;
  getSeasonLeaderboard: (nat16, nat, nat) -> (PaginatedLeaderboard) query;
  getSeasonLeaderboardCache: (nat16) -> (PaginatedLeaderboard) query;
  getSeasons: () -> (vec SeasonDTO) query;
  getSystemState: () -> (SystemState) query;
  getTeams: () -> (vec Team) query;
  getTeamsWithoutProfiles: () -> (vec UserFantasyTeam);
  getTotalManagers: () -> (nat) query;
  getValidatableFixtures: () -> (vec Fixture) query;
  getWeeklyLeaderboard: (nat16, nat8, nat, nat) ->
   (PaginatedLeaderboard) query;
  getWeeklyLeaderboardCache: (nat16, nat8) -> (PaginatedLeaderboard) query;
  isDisplayNameValid: (text) -> (bool) query;
  saveFantasyTeam: (vec nat16, nat16, nat8, nat16, nat16) -> (Result);
  savePlayerEvents: (FixtureId, vec PlayerEventData) -> ();
  testUpdatingFantasyTeams: () -> (vec record {
                                         text;
                                         UserFantasyTeam;
                                       });
  updateDisplayName: (text) -> (Result);
  updateFavouriteTeam: (nat16) -> (Result);
  updateHashForCategory: (text) -> ();
  updateProfilePicture: (blob) -> (Result);
  withdrawICP: (float64, text) -> (Result);
}
