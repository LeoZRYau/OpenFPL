var c=Object.defineProperty;var t=(n,a,e)=>a in n?c(n,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[a]=e;var i=(n,a,e)=>(t(n,typeof a!="symbol"?a+"":a,e),e);import{a as S}from"./Layout.019a660d.js";import{A as r,i as _}from"./TeamService.d8b3ee2a.js";import{S as I}from"./LoadingIcon.16560e32.js";class d{constructor(){i(this,"actor");this.actor=r.createActor(_,"bkyz2-fmaaa-aaaaa-qaaaq-cai")}async actorFromIdentity(){const a=await new Promise((e,s)=>{const o=S.subscribe(m=>{m.identity&&(o(),e(m.identity))})});return r.createActor(_,"bkyz2-fmaaa-aaaaa-qaaaq-cai",a)}async getTotalManagers(){try{const a=await this.actor.getTotalManagers();return Number(a)}catch(a){throw console.error("Error fetching total managers:",a),a}}async getFantasyTeamForGameweek(a,e){try{let o=await new I().getSystemState();return await this.actor.getFantasyTeamForGameweek(a,o?.activeSeason.id,e)}catch(s){throw console.error("Error fetching total managers:",s),s}}async getFantasyTeam(){try{return await(await this.actorFromIdentity()).getFantasyTeam()}catch(a){throw console.error("Error fetching total managers:",a),a}}async saveFantasyTeam(a){try{return await(await this.actorFromIdentity()).saveFantasyTeam(a)}catch(e){throw console.error("Error fetching total managers:",e),e}}}export{d as M};
