var _=Object.defineProperty;var c=(s,a,e)=>a in s?_(s,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[a]=e;var m=(s,a,e)=>(c(s,typeof a!="symbol"?a+"":a,e),e);import{a as t}from"./Layout.987d9cae.js";import{A as i,i as r}from"./LoadingIcon.ca18fd8e.js";import{S}from"./BadgeIcon.15c5bab3.js";class d{constructor(){m(this,"actor");this.actor=i.createActor(r,"bkyz2-fmaaa-aaaaa-qaaaq-cai")}async actorFromIdentity(){let a;return new Promise((e,n)=>{a=t.subscribe(o=>{o.identity&&e(o.identity)})}).then(e=>(a(),i.createActor(r,"bkyz2-fmaaa-aaaaa-qaaaq-cai",e)))}async getTotalManagers(){try{const a=await this.actor.getTotalManagers();return Number(a)}catch(a){throw console.error("Error fetching total managers:",a),a}}async getFantasyTeamForGameweek(a,e){try{let n=new S;await n.updateSystemStateData();let o=await n.getSystemState();return await this.actor.getFantasyTeamForGameweek(a,o?.activeSeason.id,e)}catch(n){throw console.error("Error fetching fantasy team for gameweek:",n),n}}async getFantasyTeam(){try{const e=await(await this.actorFromIdentity()).getFantasyTeam();return console.log(e),e}catch(a){throw console.error("Error fetching fantasy team:",a),a}}async saveFantasyTeam(a){try{return await(await this.actorFromIdentity()).saveFantasyTeam(a)}catch(e){throw console.error("Error saving fantasy team:",e),e}}}export{d as M};
