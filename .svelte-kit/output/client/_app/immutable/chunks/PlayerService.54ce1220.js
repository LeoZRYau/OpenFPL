var C=Object.defineProperty;var O=(a,e,t)=>e in a?C(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var g=(a,e,t)=>(O(a,typeof e!="symbol"?e+"":e,t),t);import"./Layout.987d9cae.js";import{A as F}from"./LoadingIcon.ca18fd8e.js";import{r as u,S as j}from"./BadgeIcon.15c5bab3.js";const x=({IDL:a})=>{const e=a.Rec(),t=a.Rec(),n=a.Rec(),c=a.Rec(),s=a.Rec(),l=a.Rec(),r=a.Nat16,i=a.Nat16,N=a.Nat32,_=a.Record({fixtureId:N,playerId:a.Nat16,eventStartMinute:a.Nat8,eventEndMinute:a.Nat8,teamId:r,eventType:a.Nat8});c.fill(a.Opt(a.Tuple(_,c)));const m=a.Nat8,d=a.Record({id:a.Nat32,status:a.Nat8,awayTeamId:r,highestScoringPlayerId:a.Nat16,homeTeamId:r,seasonId:i,events:c,kickOff:a.Int,homeGoals:a.Nat8,gameweek:m,awayGoals:a.Nat8}),p=a.Record({id:a.Nat16,value:a.Nat,dateOfBirth:a.Int,nationality:a.Text,shirtNumber:a.Nat8,totalPoints:a.Int16,teamId:a.Nat16,position:a.Nat8,lastName:a.Text,firstName:a.Text}),P=a.Record({id:a.Nat16,assists:a.Int16,goalsScored:a.Int16,saves:a.Int16,goalsConceded:a.Int16,events:c,teamId:a.Nat16,position:a.Nat8,points:a.Int16}),A=a.Record({hash:a.Text,category:a.Text}),o=a.Nat16,b=a.Record({events:c,number:a.Nat8,points:a.Int16});n.fill(a.Opt(a.Tuple(b,n)));const R=a.Record({id:a.Nat16,gameweeks:n});t.fill(a.Opt(a.Tuple(R,t)));const S=a.Record({description:a.Text,injuryStartDate:a.Int,expectedEndDate:a.Int});e.fill(a.Opt(a.Tuple(S,e)));const v=a.Record({transferDate:a.Int,loanEndDate:a.Int,toTeam:r,transferSeason:i,fromTeam:r,transferGameweek:m});s.fill(a.Opt(a.Tuple(v,s)));const T=a.Record({oldValue:a.Nat,newValue:a.Nat,seasonId:a.Nat16,gameweek:a.Nat8});l.fill(a.Opt(a.Tuple(T,l)));const y=a.Record({id:o,value:a.Nat,seasons:t,dateOfBirth:a.Int,injuryHistory:e,transferHistory:s,isInjured:a.Bool,nationality:a.Text,retirementDate:a.Int,valueHistory:l,shirtNumber:a.Nat8,teamId:r,position:a.Nat8,parentTeamId:a.Nat16,lastName:a.Text,onLoan:a.Bool,firstName:a.Text}),h=a.Record({fixtureId:N,events:a.Vec(_),number:a.Nat8,points:a.Int16}),f=a.Record({id:o,value:a.Nat,dateOfBirth:a.Int,injuryHistory:a.Vec(S),seasonId:i,isInjured:a.Bool,gameweeks:a.Vec(h),nationality:a.Text,retirementDate:a.Int,valueHistory:a.Vec(T),shirtNumber:a.Nat8,teamId:r,position:a.Nat8,parentTeamId:a.Nat16,lastName:a.Text,onLoan:a.Bool,firstName:a.Text}),E=a.Record({id:a.Nat16,events:a.Vec(_),teamId:a.Nat16,position:a.Nat8,gameweek:m,points:a.Int16});return a.Service({calculatePlayerScores:a.Func([a.Nat16,a.Nat8,d],[d],[]),createPlayer:a.Func([r,a.Nat8,a.Text,a.Text,a.Nat8,a.Nat,a.Int,a.Text],[],[]),getActivePlayers:a.Func([],[a.Vec(p)],["query"]),getAllPlayers:a.Func([],[a.Vec(p)],["query"]),getAllPlayersMap:a.Func([a.Nat16,a.Nat8],[a.Vec(a.Tuple(a.Nat16,P))],["query"]),getDataHashes:a.Func([],[a.Vec(A)],["query"]),getPlayer:a.Func([a.Nat16],[y],["query"]),getPlayerDetails:a.Func([a.Nat16,i],[f],["query"]),getPlayerDetailsForGameweek:a.Func([a.Nat16,a.Nat8],[a.Vec(E)],["query"]),getPlayersDetailsForGameweek:a.Func([a.Vec(o),a.Nat16,a.Nat8],[a.Vec(E)],["query"]),getRetiredPlayer:a.Func([a.Text],[a.Vec(y)],["query"]),loanPlayer:a.Func([o,r,a.Int,i,m],[],[]),recallPlayer:a.Func([o],[],[]),retirePlayer:a.Func([o,a.Int],[],[]),revaluePlayerDown:a.Func([o,i,m],[],["oneway"]),revaluePlayerUp:a.Func([o,i,m],[],[]),setDefaultHashes:a.Func([],[],[]),setPlayerInjury:a.Func([o,a.Text,a.Int],[],[]),transferPlayer:a.Func([o,r,i,m],[],[]),unretirePlayer:a.Func([o],[],[]),updateHashForCategory:a.Func([a.Text],[],[]),updatePlayer:a.Func([o,a.Nat8,a.Text,a.Text,a.Nat8,a.Int,a.Text],[],[]),updatePlayerEventDataCache:a.Func([],[],[])})};class V{constructor(){g(this,"actor");this.actor=F.createActor(x,"be2us-64aaa-aaaaa-qaabq-cai")}async updatePlayersData(){let e="players",n=(await this.actor.getDataHashes()).find(s=>s.category==e)??null;const c=localStorage.getItem(e);if(n?.hash!=c){let s=await this.actor.getAllPlayers();localStorage.setItem("players_data",JSON.stringify(s,u)),localStorage.setItem(e,n?.hash??"")}}async getPlayers(){const e=localStorage.getItem("players_data");let t;try{t=JSON.parse(e||"[]")}catch{t=[]}return t}async updatePlayerEventsData(){let e="player_events",n=(await this.actor.getDataHashes()).find(s=>s.category==e)??null;const c=localStorage.getItem(e);if(n?.hash!=c){let s=new j;await s.updateSystemStateData();let l=await s.getSystemState(),r=await this.actor.getAllPlayersMap(l?.activeSeason?.id,l?.activeGameweek);localStorage.setItem("players_data",JSON.stringify(r,u)),localStorage.setItem(e,n?.hash??"")}}async getPlayerEvents(){const e=localStorage.getItem("player_events_data");let t;try{t=JSON.parse(e||"[]")}catch{t=[]}return t}async getPlayerDetails(e,t){try{return await this.actor.getPlayerDetails(e,t)}catch(n){throw console.error("Error fetching player data:",n),n}}}export{V as P};
